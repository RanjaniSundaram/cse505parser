# -*- coding: utf-8 -*-
"""Copy of QUBO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MiOWKH7-RaJlH687-i7FH_o-NcqIlDpj
"""

import qubovert as qv
from qubovert import boolean_var, PCBO, QUBO

import dimod

from sympy import *
import numpy as np

## Convert Integer Variables to Binary

def INT_to_BIN(prog, constraints):
	int_to_bin_vector={}
	int_to_bin_var={} 
	for variable, bounds in constraints.items():
		if bounds==(0,1):
		  int_to_bin_vector[variable]=symbols(variable)
		  continue
		else:
			new_constraint=[]
			diff=bounds[1]-bounds[0]
			num_vars=int(np.log2(diff))+1
			new_constraint+=[2**(num) for num in range(num_vars)]
			var_string=''
			for num in range(0,num_vars):
				var_string+=variable+str(num)+' '

			if num_vars<2:
				variables=[symbols(var_string)]
			else:
				variables=list(symbols(var_string))
			int_to_bin_vector[variable]=bounds[0]+np.dot(new_constraint,variables)
	new=0
	
	new_prog=[]
	for expr in prog:
		new=0
		for sub_expr, coeff in expr.items():
			if sub_expr==():
				new+=coeff
				continue
			replace=1
			for variable in sub_expr:
				replace*=int_to_bin_vector[variable]
				replace=expand(replace)
			replace*=coeff
			new+=replace
		
		new=new.as_coefficients_dict()
		new_expr={}
		for key in new.keys():
			if key==1:
				new_key=()
				new_expr[new_key]=new[key]
				continue
			new_key=tuple((str(key)).split("*"))
			new_expr[new_key]=new[key]
		new_prog.append(new_expr)	
	return new_prog, int_to_bin_vector

"""Input Format and Processing"""

##Objective
cubic = {('x',): -1, ('y',): 1, ('z',): -1.5, ('x', 'y'): -1, ('x', 'y', 'z'): 2}

##Constraints 

constraint1={('x',):1, ('y',):2, ():-5}
bounds={'x':(0,11), 'y':(1,2), 'z':(4,6)}

answer, int_to_bin_vector=INT_to_BIN([cubic, constraint1], bounds)

print(answer)
#print(dimod.make_quadratic(answer[0], 1, dimod.BINARY))

bounds2={'x':(0,2),'y':(0,1), 'z':(4,6)}

answer2,int_to_bin_vector=INT_to_BIN([cubic, constraint1], bounds2)

print(answer2)
answer=answer2
print(int_to_bin_vector)

#PCBO to QUBO via qubovert


objective=answer[0]
constraint_types=['le']

H = PCBO(answer[0])
for i,constraint in enumerate(answer[1:]):

  if constraint_types[i]=='le':
    H.add_constraint_le_zero(constraint)
  
  elif constraint_types[i]=='ge':
    H.add_constraint_ge_zero(constraint)
  elif constraint_types[i]=='eq':
    H.add_constraint_eq_zero(constraint)
  else:
    print("invalid constraint")

Q=H.to_qubo()
print(Q)

##Solving QUBO

from neal import SimulatedAnnealingSampler as SAS

#solutions2=[H.convert_solution(sol) for sol in solve_qubo(Q)]
res = SAS().sample_qubo(Q.Q, num_reads=1000)

solutions2 = res.first.sample

solutions = [H.convert_solution(sol) for sol in Q.solve_bruteforce(all_solutions=True)]
print("solution of QUBO formulation represented as solutions of PCBO:", solutions)
print("solution of QUBO anneal:", solutions2)
value = res.first.energy + Q.offset
print("anneal value:", value)

print("PCBO solved by brute force:", H.solve_bruteforce(all_solutions=True))

sol_original={}
for variable in int_to_bin_vector:
  sol_original[variable]=int_to_bin_vector[variable].subs(solutions[0])
print("original solution:", sol_original)
